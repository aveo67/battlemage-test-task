//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Source/Domain/Res/Actions/MouseActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Battlemage.Domain
{
    public partial class @MouseActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MouseActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MouseActions"",
    ""maps"": [
        {
            ""name"": ""MouseActionsMap"",
            ""id"": ""fe53acd7-5222-444d-913d-06448c158cf7"",
            ""actions"": [
                {
                    ""name"": ""Right Buttom Click"",
                    ""type"": ""Button"",
                    ""id"": ""9c19d193-3316-4aa7-9794-8d1dce1ea703"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Buttom Double Click"",
                    ""type"": ""Button"",
                    ""id"": ""50091d21-0d17-471d-b461-2bbed6642641"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Buttom Hold"",
                    ""type"": ""Button"",
                    ""id"": ""ea7acb87-dd92-4e91-9ff3-865fa9aedaea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Buttom Click"",
                    ""type"": ""Button"",
                    ""id"": ""06452afa-ffb2-4cec-88b7-293d0fe83dd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Middle Buttom Click"",
                    ""type"": ""Button"",
                    ""id"": ""ee64f188-2bec-4c12-a8fe-32e64b99c00f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""d00d6b51-69db-4f8a-a97a-d490ac66aa90"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f94aec4a-13d0-436e-a5fa-3042b9508d0b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Common Schema"",
                    ""action"": ""Right Buttom Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d39a24f9-1808-4e8f-ba88-3b9dfee3219d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap(tapDelay=0.25)"",
                    ""processors"": """",
                    ""groups"": ""Common Schema"",
                    ""action"": ""Left Buttom Double Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d6ff2dc-f189-48f7-81cb-064a6309a265"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=0.25,pressPoint=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Buttom Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""217d117a-bccf-418e-a5c2-06e69f18e390"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Buttom Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e08ded65-58d8-4aa2-ab1c-151e1b42b618"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Middle Buttom Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e759f4bd-6d25-4bc5-94b3-a97a3a3cc715"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0.008333334)"",
                    ""groups"": ""Common Schema"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Common Schema"",
            ""bindingGroup"": ""Common Schema"",
            ""devices"": []
        }
    ]
}");
            // MouseActionsMap
            m_MouseActionsMap = asset.FindActionMap("MouseActionsMap", throwIfNotFound: true);
            m_MouseActionsMap_RightButtomClick = m_MouseActionsMap.FindAction("Right Buttom Click", throwIfNotFound: true);
            m_MouseActionsMap_LeftButtomDoubleClick = m_MouseActionsMap.FindAction("Left Buttom Double Click", throwIfNotFound: true);
            m_MouseActionsMap_LeftButtomHold = m_MouseActionsMap.FindAction("Left Buttom Hold", throwIfNotFound: true);
            m_MouseActionsMap_LeftButtomClick = m_MouseActionsMap.FindAction("Left Buttom Click", throwIfNotFound: true);
            m_MouseActionsMap_MiddleButtomClick = m_MouseActionsMap.FindAction("Middle Buttom Click", throwIfNotFound: true);
            m_MouseActionsMap_Scroll = m_MouseActionsMap.FindAction("Scroll", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MouseActionsMap
        private readonly InputActionMap m_MouseActionsMap;
        private List<IMouseActionsMapActions> m_MouseActionsMapActionsCallbackInterfaces = new List<IMouseActionsMapActions>();
        private readonly InputAction m_MouseActionsMap_RightButtomClick;
        private readonly InputAction m_MouseActionsMap_LeftButtomDoubleClick;
        private readonly InputAction m_MouseActionsMap_LeftButtomHold;
        private readonly InputAction m_MouseActionsMap_LeftButtomClick;
        private readonly InputAction m_MouseActionsMap_MiddleButtomClick;
        private readonly InputAction m_MouseActionsMap_Scroll;
        public struct MouseActionsMapActions
        {
            private @MouseActions m_Wrapper;
            public MouseActionsMapActions(@MouseActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @RightButtomClick => m_Wrapper.m_MouseActionsMap_RightButtomClick;
            public InputAction @LeftButtomDoubleClick => m_Wrapper.m_MouseActionsMap_LeftButtomDoubleClick;
            public InputAction @LeftButtomHold => m_Wrapper.m_MouseActionsMap_LeftButtomHold;
            public InputAction @LeftButtomClick => m_Wrapper.m_MouseActionsMap_LeftButtomClick;
            public InputAction @MiddleButtomClick => m_Wrapper.m_MouseActionsMap_MiddleButtomClick;
            public InputAction @Scroll => m_Wrapper.m_MouseActionsMap_Scroll;
            public InputActionMap Get() { return m_Wrapper.m_MouseActionsMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseActionsMapActions set) { return set.Get(); }
            public void AddCallbacks(IMouseActionsMapActions instance)
            {
                if (instance == null || m_Wrapper.m_MouseActionsMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MouseActionsMapActionsCallbackInterfaces.Add(instance);
                @RightButtomClick.started += instance.OnRightButtomClick;
                @RightButtomClick.performed += instance.OnRightButtomClick;
                @RightButtomClick.canceled += instance.OnRightButtomClick;
                @LeftButtomDoubleClick.started += instance.OnLeftButtomDoubleClick;
                @LeftButtomDoubleClick.performed += instance.OnLeftButtomDoubleClick;
                @LeftButtomDoubleClick.canceled += instance.OnLeftButtomDoubleClick;
                @LeftButtomHold.started += instance.OnLeftButtomHold;
                @LeftButtomHold.performed += instance.OnLeftButtomHold;
                @LeftButtomHold.canceled += instance.OnLeftButtomHold;
                @LeftButtomClick.started += instance.OnLeftButtomClick;
                @LeftButtomClick.performed += instance.OnLeftButtomClick;
                @LeftButtomClick.canceled += instance.OnLeftButtomClick;
                @MiddleButtomClick.started += instance.OnMiddleButtomClick;
                @MiddleButtomClick.performed += instance.OnMiddleButtomClick;
                @MiddleButtomClick.canceled += instance.OnMiddleButtomClick;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
            }

            private void UnregisterCallbacks(IMouseActionsMapActions instance)
            {
                @RightButtomClick.started -= instance.OnRightButtomClick;
                @RightButtomClick.performed -= instance.OnRightButtomClick;
                @RightButtomClick.canceled -= instance.OnRightButtomClick;
                @LeftButtomDoubleClick.started -= instance.OnLeftButtomDoubleClick;
                @LeftButtomDoubleClick.performed -= instance.OnLeftButtomDoubleClick;
                @LeftButtomDoubleClick.canceled -= instance.OnLeftButtomDoubleClick;
                @LeftButtomHold.started -= instance.OnLeftButtomHold;
                @LeftButtomHold.performed -= instance.OnLeftButtomHold;
                @LeftButtomHold.canceled -= instance.OnLeftButtomHold;
                @LeftButtomClick.started -= instance.OnLeftButtomClick;
                @LeftButtomClick.performed -= instance.OnLeftButtomClick;
                @LeftButtomClick.canceled -= instance.OnLeftButtomClick;
                @MiddleButtomClick.started -= instance.OnMiddleButtomClick;
                @MiddleButtomClick.performed -= instance.OnMiddleButtomClick;
                @MiddleButtomClick.canceled -= instance.OnMiddleButtomClick;
                @Scroll.started -= instance.OnScroll;
                @Scroll.performed -= instance.OnScroll;
                @Scroll.canceled -= instance.OnScroll;
            }

            public void RemoveCallbacks(IMouseActionsMapActions instance)
            {
                if (m_Wrapper.m_MouseActionsMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMouseActionsMapActions instance)
            {
                foreach (var item in m_Wrapper.m_MouseActionsMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MouseActionsMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MouseActionsMapActions @MouseActionsMap => new MouseActionsMapActions(this);
        private int m_CommonSchemaSchemeIndex = -1;
        public InputControlScheme CommonSchemaScheme
        {
            get
            {
                if (m_CommonSchemaSchemeIndex == -1) m_CommonSchemaSchemeIndex = asset.FindControlSchemeIndex("Common Schema");
                return asset.controlSchemes[m_CommonSchemaSchemeIndex];
            }
        }
        public interface IMouseActionsMapActions
        {
            void OnRightButtomClick(InputAction.CallbackContext context);
            void OnLeftButtomDoubleClick(InputAction.CallbackContext context);
            void OnLeftButtomHold(InputAction.CallbackContext context);
            void OnLeftButtomClick(InputAction.CallbackContext context);
            void OnMiddleButtomClick(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
        }
    }
}
