//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Source/Domain/Res/Actions/SystemKeyActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Battlemage.Domain
{
    public partial class @SystemKeyActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @SystemKeyActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""SystemKeyActions"",
    ""maps"": [
        {
            ""name"": ""SystemKeyMap"",
            ""id"": ""0ffa61ea-21f0-459b-b4e3-dcf1da5b274b"",
            ""actions"": [
                {
                    ""name"": ""Shift Press"",
                    ""type"": ""Button"",
                    ""id"": ""afbea519-2cdf-4f1e-9405-66b2016e923e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shift Release"",
                    ""type"": ""Button"",
                    ""id"": ""3dbd1542-04f5-4230-ae86-bc358cbebd1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alt Press"",
                    ""type"": ""Button"",
                    ""id"": ""9c8b176a-c3c4-4b06-9d93-ce679d05ee3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alt Release"",
                    ""type"": ""Button"",
                    ""id"": ""751360a4-b755-4679-8999-83c285e905d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Control Press"",
                    ""type"": ""Button"",
                    ""id"": ""ea1b8c8f-c4dd-4e53-b0e8-6f48295d208b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Control Release"",
                    ""type"": ""Button"",
                    ""id"": ""310aacfa-6537-47a4-86d6-6d650142e8a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""18bb0716-682e-4600-8cff-301436ea753d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""SysKeyScheme"",
                    ""action"": ""Shift Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a8eeb5f-5376-48d7-a254-6d253c736002"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""SysKeyScheme"",
                    ""action"": ""Shift Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbd1d9d5-705a-4334-b03c-2398cc84509d"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""SysKeyScheme"",
                    ""action"": ""Alt Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6514c2b-f6fc-46a5-8368-c8456a03b6f0"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""SysKeyScheme"",
                    ""action"": ""Alt Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97327d06-0a0a-4e94-bf25-8cc78b5a8a65"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""SysKeyScheme"",
                    ""action"": ""Control Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d6e78a1-7e7b-48d9-b920-fefdafe0fc80"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""SysKeyScheme"",
                    ""action"": ""Control Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""SysKeyScheme"",
            ""bindingGroup"": ""SysKeyScheme"",
            ""devices"": []
        }
    ]
}");
            // SystemKeyMap
            m_SystemKeyMap = asset.FindActionMap("SystemKeyMap", throwIfNotFound: true);
            m_SystemKeyMap_ShiftPress = m_SystemKeyMap.FindAction("Shift Press", throwIfNotFound: true);
            m_SystemKeyMap_ShiftRelease = m_SystemKeyMap.FindAction("Shift Release", throwIfNotFound: true);
            m_SystemKeyMap_AltPress = m_SystemKeyMap.FindAction("Alt Press", throwIfNotFound: true);
            m_SystemKeyMap_AltRelease = m_SystemKeyMap.FindAction("Alt Release", throwIfNotFound: true);
            m_SystemKeyMap_ControlPress = m_SystemKeyMap.FindAction("Control Press", throwIfNotFound: true);
            m_SystemKeyMap_ControlRelease = m_SystemKeyMap.FindAction("Control Release", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // SystemKeyMap
        private readonly InputActionMap m_SystemKeyMap;
        private List<ISystemKeyMapActions> m_SystemKeyMapActionsCallbackInterfaces = new List<ISystemKeyMapActions>();
        private readonly InputAction m_SystemKeyMap_ShiftPress;
        private readonly InputAction m_SystemKeyMap_ShiftRelease;
        private readonly InputAction m_SystemKeyMap_AltPress;
        private readonly InputAction m_SystemKeyMap_AltRelease;
        private readonly InputAction m_SystemKeyMap_ControlPress;
        private readonly InputAction m_SystemKeyMap_ControlRelease;
        public struct SystemKeyMapActions
        {
            private @SystemKeyActions m_Wrapper;
            public SystemKeyMapActions(@SystemKeyActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ShiftPress => m_Wrapper.m_SystemKeyMap_ShiftPress;
            public InputAction @ShiftRelease => m_Wrapper.m_SystemKeyMap_ShiftRelease;
            public InputAction @AltPress => m_Wrapper.m_SystemKeyMap_AltPress;
            public InputAction @AltRelease => m_Wrapper.m_SystemKeyMap_AltRelease;
            public InputAction @ControlPress => m_Wrapper.m_SystemKeyMap_ControlPress;
            public InputAction @ControlRelease => m_Wrapper.m_SystemKeyMap_ControlRelease;
            public InputActionMap Get() { return m_Wrapper.m_SystemKeyMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SystemKeyMapActions set) { return set.Get(); }
            public void AddCallbacks(ISystemKeyMapActions instance)
            {
                if (instance == null || m_Wrapper.m_SystemKeyMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SystemKeyMapActionsCallbackInterfaces.Add(instance);
                @ShiftPress.started += instance.OnShiftPress;
                @ShiftPress.performed += instance.OnShiftPress;
                @ShiftPress.canceled += instance.OnShiftPress;
                @ShiftRelease.started += instance.OnShiftRelease;
                @ShiftRelease.performed += instance.OnShiftRelease;
                @ShiftRelease.canceled += instance.OnShiftRelease;
                @AltPress.started += instance.OnAltPress;
                @AltPress.performed += instance.OnAltPress;
                @AltPress.canceled += instance.OnAltPress;
                @AltRelease.started += instance.OnAltRelease;
                @AltRelease.performed += instance.OnAltRelease;
                @AltRelease.canceled += instance.OnAltRelease;
                @ControlPress.started += instance.OnControlPress;
                @ControlPress.performed += instance.OnControlPress;
                @ControlPress.canceled += instance.OnControlPress;
                @ControlRelease.started += instance.OnControlRelease;
                @ControlRelease.performed += instance.OnControlRelease;
                @ControlRelease.canceled += instance.OnControlRelease;
            }

            private void UnregisterCallbacks(ISystemKeyMapActions instance)
            {
                @ShiftPress.started -= instance.OnShiftPress;
                @ShiftPress.performed -= instance.OnShiftPress;
                @ShiftPress.canceled -= instance.OnShiftPress;
                @ShiftRelease.started -= instance.OnShiftRelease;
                @ShiftRelease.performed -= instance.OnShiftRelease;
                @ShiftRelease.canceled -= instance.OnShiftRelease;
                @AltPress.started -= instance.OnAltPress;
                @AltPress.performed -= instance.OnAltPress;
                @AltPress.canceled -= instance.OnAltPress;
                @AltRelease.started -= instance.OnAltRelease;
                @AltRelease.performed -= instance.OnAltRelease;
                @AltRelease.canceled -= instance.OnAltRelease;
                @ControlPress.started -= instance.OnControlPress;
                @ControlPress.performed -= instance.OnControlPress;
                @ControlPress.canceled -= instance.OnControlPress;
                @ControlRelease.started -= instance.OnControlRelease;
                @ControlRelease.performed -= instance.OnControlRelease;
                @ControlRelease.canceled -= instance.OnControlRelease;
            }

            public void RemoveCallbacks(ISystemKeyMapActions instance)
            {
                if (m_Wrapper.m_SystemKeyMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISystemKeyMapActions instance)
            {
                foreach (var item in m_Wrapper.m_SystemKeyMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SystemKeyMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SystemKeyMapActions @SystemKeyMap => new SystemKeyMapActions(this);
        private int m_SysKeySchemeSchemeIndex = -1;
        public InputControlScheme SysKeySchemeScheme
        {
            get
            {
                if (m_SysKeySchemeSchemeIndex == -1) m_SysKeySchemeSchemeIndex = asset.FindControlSchemeIndex("SysKeyScheme");
                return asset.controlSchemes[m_SysKeySchemeSchemeIndex];
            }
        }
        public interface ISystemKeyMapActions
        {
            void OnShiftPress(InputAction.CallbackContext context);
            void OnShiftRelease(InputAction.CallbackContext context);
            void OnAltPress(InputAction.CallbackContext context);
            void OnAltRelease(InputAction.CallbackContext context);
            void OnControlPress(InputAction.CallbackContext context);
            void OnControlRelease(InputAction.CallbackContext context);
        }
    }
}
